CONSTANTS  begin
	CLIP_ROW_SPACE = 10000
end
CLASSES BEGIN
	cLine is Struct begin
		c1 as Char (200)
		c2 as Char (200)
		c3 as Char (200)
		c4 as Char (200)
		c5 as Char (200)
		c6 as Char (200)
		c7 as Char (200)
		c8 as Char (200)
		c9 as Char (200)
		c10 as Char (200)
		c11 as Char (200)
		c12 as Char (200)
		c13 as Char (200)
		c14 as Char (200)
		c15 as Char (200)
		c16 as Char (200)
		c17 as Char (200)
		c18 as Char (200)
		c19 as Char (200)
		c20 as Char (200)
		c21 as Char (200)
		c22 as Char (200)
		c23 as Char (200)
		c24 as Char (200)
		c25 as Char (200)
		c26 as Char (200)
		c27 as Char (200)
		c28 as Char (200)
		c29 as Char (200)
		c30 as Char (200)
		c31 as Char (200)
		c32 as Char (200)
		c33 as Char (200)
		c34 as Char (200)
		c35 as Char (200)
		c36 as Char (200)
		c37 as Char (200)
		c38 as Char (200)
		c39 as Char (200)
		c40 as Char (200)
		c41 as Char (200)
		c42 as Char (200)
		c43 as Char (200)
		c44 as Char (200)
		c45 as Char (200)
		c46 as Char (200)
		c47 as Char (200)
		c48 as Char (200)
		c49 as Char (200)
		c50 as Char (200)
		c51 as Char (200)
		c52 as Char (200)
		c53 as Char (200)
		c54 as Char (200)
		c55 as Char (200)
		c56 as Char (200)
		c57 as Char (200)
		c58 as Char (200)
		c59 as Char (200)
		c60 as Char (200)
		c61 as Char (200)
		c62 as Char (200)
		c63 as Char (200)
		c64 as Char (200)
		c65 as Char (200)
		c66 as Char (200)
		c67 as Char (200)
		c68 as Char (200)
		c69 as Char (200)
		c70 as Char (200)
		c71 as Char (200)
		c72 as Char (200)
		c73 as Char (200)
		c74 as Char (200)
		c75 as Char (200)
		c76 as Char (200)
		c77 as Char (200)
		c78 as Char (200)
		c79 as Char (200)
		c80 as Char (200)
		c81 as Char (200)
		c82 as Char (200)
		c83 as Char (200)
		c84 as Char (200)
		c85 as Char (200)
		c86 as Char (200)
		c87 as Char (200)
		c88 as Char (200)
		c89 as Char (200)
		c90 as Char (200)
		c91 as Char (200)
		c92 as Char (200)
		c93 as Char (200)
		c94 as Char (200)
		c95 as Char (200)
		c96 as Char (200)
		c97 as Char (200)
		c98 as Char (200)
		c99 as Char (200)
		c100 as Char (200)
		c101 as Char (200)
		c102 as Char (200)
		c103 as Char (200)
		c104 as Char (200)
		c105 as Char (200)
		c106 as Char (200)
		c107 as Char (200)
		c108 as Char (200)
		c109 as Char (200)
		c110 as Char (200)
		c111 as Char (200)
		c112 as Char (200)
		c113 as Char (200)
		c114 as Char (200)
		c115 as Char (200)
		c116 as Char (200)
		c117 as Char (200)
		c118 as Char (200)
		c119 as Char (200)
		c120 as Char (200)
		c121 as Char (200)
		c122 as Char (200)
		c123 as Char (200)
		c124 as Char (200)
		c125 as Char (200)
		c126 as Char (200)
		c127 as Char (200)
		c128 as Char (200)
	end
	cLines is Array [1] of Char (10000)
	cSqlToClipboard is Struct begin
		private Select as Char
		private Header as Char
		private ColumnSeparator as Char (1) default "|"
		private HandleWinCallback as Integer default 0
		private ProgressMessageId as Integer default 0
		private Cancel as Boolean default FALSE
	end
END
CODE CLASS cLine BEGIN
//{{CODEBEGIN
public formatRowBeforeAdd( psmaNumberOfColumns as smallint, pchrSeparator as char ) return char
objects
begin
    intI                as integer default 0
    chrRow              as char default ''
    chrField            as char default ''
    chrValue            as char default ''
end
begin
    for intI = 1 to psmaNumberOfColumns do
    begin
        chrField = "c"+intI.Char;
        EvalVar( chrField.Trim, chrValue );
        if chrValue is null then AsgVar( chrField.Trim, "" ); // Avoid null values

        chrRow += chrValue + pchrSeparator;
    end

    chrRow = chrRow[1,chrRow.Length-1];
    chrRow += 13.Character + 10.Character();

    return chrRow;
end
//{{CODEEND
END
CODE CLASS cLines BEGIN
//{{CODEBEGIN
public reset
begin
    self.Resize( 1 );
    self[1] = "";
end

public add( pchrRowText as char )
objects
begin
    intI            as integer default 0
end
begin
    // Resize array when space available in last element is not enough for new row value
    if pchrRowText.Length > (CLIP_ROW_SPACE - self[self.Size].Length) then self.Resize( self.Size+1 );

    // Append the new row into last array element
    self[self.Size] += pchrRowText;
end

public getWidth return integer
begin
    // Entire width of array
    switch self.Size()
    begin
        case 1:
        begin
            return self[1].Length;
        end
        case > 1:
        begin
            return (((self.Size-1)*CLIP_ROW_SPACE) + (self[self.Size].Length));
        end
    end
end
//{{CODEEND
END
CODE CLASS cSqlToClipboard BEGIN
//{{CODEBEGIN
public init()
begin
    self.Select = null;
    self.Header = null;
    self.ColumnSeparator = "|";
    self.ProgressMessageId = Random(10000,30000) * Random (10000, 30000);
end

public setSelect( pchrSelect as char )
begin
    self.Select = pchrSelect;
end

public setHeader( pchrHeader as char )
begin
    self.Header = pchrHeader;
end

public setColumnSeparator( pchrCharacter as char ) return boolean
begin
    if pchrCharacter is null or pchrCharacter.Length != 1 then return false;

    self.ColumnSeparator = pchrCharacter;
    return true;
end

public setHandleCallBack( pintHandle as integer )
begin
    self.HandleWinCallback = pintHandle;
end

public getProgressMessageId return integer
begin
    return self.ProgressMessageId;
end

public cancelQuery()
begin
    self.Cancel = true;
end

public copy() return integer
objects
begin
    intI                as integer default 0
    intIdWinMessage     as integer default 0
    Line                as cLine
    Rows                as cLines
    smaNumSelectColumns as smallint default 0
    r1                  as SqlCursor
    chrRowText          as char default ''
    intCounter          as integer default 0
    intOffset       as integer default 0
    intGblMem       as integer default 0
    intPntGblMem    as integer default 0
    intPntClipMem   as integer default 0
end
begin
    self.Cancel = false;
    Rows.reset();

    if self.HandleWinCallback > 0 then intIdWinMessage = getUniqueIDWindowsMessage();

    if self.Header is not null and self.Header.Length() > 0 and self.ColumnSeparator.Length() == 1 then
    begin
        self.Header += 13.Character()+10.Character();
        Rows.add( self.Header );
    end

    smaNumSelectColumns = getNumberOfColumnsInSelect();
    
    r1.Prepare( self.Select );
    r1.Open();
    while r1.Fetch( Line ).Found do
    begin
        ++intCounter;
    
        chrRowText = "";
        chrRowText = Line.formatRowBeforeAdd( smaNumSelectColumns, self.ColumnSeparator );

        Rows.add( chrRowText );

        if self.HandleWinCallback > 0 then
        begin
            SendMessageA( self.HandleWinCallback,
                          intIdWinMessage,
                          self.ProgressMessageId,
                          intCounter);
        end
        
        if self.Cancel then break;
    end
    r1.Close.Free();

    // Memory allocation for the entire content
    intGblMem = GlobalAlloc( 66, Rows.getWidth ); // 66 = Flags parameter. GMEM_MOVEABLE with GMEM_ZEROINIT.
    // Lock memory space
    intPntGblMem = GlobalLock( intGblMem );

    for intI = 1 to Rows.Size do
    begin
        // It place string in memory (in a consecutive position to the previous line)
        intPntGblMem = lstrcpy( intPntGblMem + intOffset, Rows[intI] );

        // Move offset depending string size
        intOffset = Rows[intI].Length;
    end

    // Unlock memory space
    if GlobalUnlock( intGblMem ) != 0 then
    begin
        MessageBox("Memory Error","Clipboard",16);
        return 0;
    end

    OpenClipboard( NULL );
    EmptyClipboard();
    intPntClipMem = SetClipboardData( 1, intGblMem );
    CloseClipboard();

    return intCounter;
end

private getNumberOfColumnsInSelect() return smallint
objects
begin
    chrColumns      as char default ''
    smaNumColumns   as smallint default 0
end
begin
    smaNumColumns = self.Select.SubString( 1, self.Select.Locate("from") ).Count(",")+1;
    
    return smaNumColumns;
end

public getUniqueIDWindowsMessage return integer
begin
    return RegisterWindowMessageA("cosmosusermessage");
end
//{{CODEEND
END
CODE BEGIN
//{{CODEBEGIN
{+--------------- GNU General Public License v3.0 ------------------+
 |                                                                  |
 | Modulo: INCLUDE_CLIPBOARD                                        |
 | Autor:  David Ropero                                             |
 | Fecha:  December 2017                                           |
 |                                                                  |
 +-----------------------------------------------------------------+}

public dll "user32.dll" SetClipboardData( wFormat   as integer,
                                          hMem      as integer ) return integer

public dll "user32.dll" CloseClipboard() return integer

public dll "user32.dll" OpenClipboard( hwnd as integer ) return integer

public dll "user32.dll" GetClipboardData( wFormat as integer ) return integer

public dll "kernel32.dll" lstrlenA( lpString as integer ) return integer

public dll "kernel32.dll" RtlMoveMemory( VAR pDst       as char,
                                             pSrc       as integer,
                                             ByteLen    as integer )

public dll "kernel32.dll" GlobalAlloc (uFlags as integer, dwBytes as integer) return integer

public dll "kernel32.dll" GlobalLock (hMem as integer) return integer

public dll "kernel32.dll" GlobalUnlock (hMem as integer) return integer

public dll "user32.dll" EmptyClipboard() return integer

public dll "kernel32.dll" lstrcpy (lpString1 as integer, lpString2 as char) return integer

public dll "user32.dll" RegisterWindowMessageA(lpString as char) return integer

public dll "user32" SendMessageA(hwnd as integer,wMsg as integer,wParam as integer,lParam as simple) return integer
//{{CODEEND
END

